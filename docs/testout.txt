{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...


Insertion Sort test: {"opts":{}}. Length: 1000
  Insertion Sort test: 15.727ms
{ lastVal: 965 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 1000
  Insertion Sort test: 17.342ms
{ lastVal: 930 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 1000
  Insertion Sort test: 19.518ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 1000
  Insertion Sort test: 11.462ms
{ lastVal: 0 }
  Insertion Sort test passed.
Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 181.57ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 169.509ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 1.925ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 3.467ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 3.164ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 3.521ms
  QuickSelect test passed.


QuickSort test: {"opts":{}}. Length: 100000
  QuickSort test: 105.116ms
{ lastVal: 99142 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 100000
  QuickSort test: 1.702s
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 100000
  QuickSort test: 81.616ms
{ lastVal: 99758 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 100000
  QuickSort test: 1.363s
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 100000
  QuickSort test: 86.711ms
{ lastVal: 99749 }
  QuickSort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 13.09ms
{ lastVal: 9853 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 12.31ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 16.164ms
{ lastVal: 9918 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 6.706ms
{ lastVal: 0 }
  MergeSort test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 75.226ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 11:  795
Row: 10:  751 795
Row: 9:  751 795
Row: 8:  32 236 751 795 890
Row: 7:  32 230 236 572 751 795 828 890 913 927 932
Row: 6:  32 99 230 236 260 312 326 357 572 674 751 761 795 828 890 913 927 932
Row: 5:  32 99 226 230 233 236 260 312 326 357 386 452 491 502 572 600 621 654 662 674 680 751 761 771 777 795 828 854 886 890 913 927 932
Row: 4:  17 19 23 32 77 81 99 132 172 221 224 226 230 233 236 260 286 295 312 326 339 357 386 392 431 435 452 458 489 491 502 504 572 590 600 621 625 654 662 670 674 680 681 741 751 761 770 771 777 781 795 803 811 828 854 862 886 890 896 906 911 912 913 927 932 947 964 990
Row: 3:  0 4 9 17 18 19 23 32 41 45 60 64 76 77 81 99 114 121 132 156 172 180 196 199 221 224 226 230 233 236 257 260 281 286 289 290 295 310 312 326 329 335 339 357 363 381 386 392 396 411 431 435 437 446 452 458 459 461 465 489 491 502 504 520 525 572 590 591 600 621 625 639 654 662 666 670 674 680 681 696 707 709 719 727 728 737 741 751 761 762 770 771 777 778 781 794 795 800 803 811 818 828 829 849 851 854 862 868 886 890 896 897 906 911 912 913 917 927 932 939 947 964 965 990
Row
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 5:  2
Row: 4:  2
Row: 3:  1 2
Row: 2:  -1 1 2
Row: 1:  -1 1 2 3
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 1:  5
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 2:  2
Row: 1:  2
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 518.734ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 383.69ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 559.257ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 363.262ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 554.867ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 490.993ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 291. Actual size: 291

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 325. Actual size: 325

Scale test heap as tree...
{ size: 5000, heapTop: 4999, actual: { min: 0, max: 4999 } }
  Heap As Tree 5000 insertions: 705.954ms
Scale test heap as list...
{ size: 5000000, heapTop: 4999999, actual: { min: 1, max: 4999999 } }
  Heap As List 5000000 insertions: 707.119ms
New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
node: 5 	  
  
  Row: 1
node: 3 	node: 4 	  
  
  Row: 2
node: 2 	node: 1 	  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
node: 9 	  
  
  Row: 1
node: 8 	node: 7 	  
  
  Row: 2
node: 5 	node: 6 	  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.


[ 3, 2, 1 ]
[ 1, 2, 3 ]
[ 3, 2, 1 ]
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 35.49ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 18.422ms
  Expected size: 945. Actual size: 945
  SOL first 5: [{"key":17,"value":"number 17"},{"key":21,"value":"number 21"},{"key":26,"value":"number 26"},{"key":92,"value":"number 92"},{"key":79,"value":"number 79"}]
  SOL length: 945

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 2.607ms
  SOL first 5: [{"key":165,"value":"number 165"},{"key":708,"value":"number 708"},{"key":317,"value":"number 317"},{"key":428,"value":"number 428"},{"key":422,"value":"number 422"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 174.288ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 204.807ms
  Expected size: 931. Actual size: 931
  SOL first 5: [{"thing":{"key":32,"value":"number 32"}},{"thing":{"key":30,"value":"number 30"}},{"thing":{"key":25,"value":"number 25"}},{"thing":{"key":67,"value":"number 67"}},{"thing":{"key":112,"value":"number 112"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 24.519ms
  SOL first 5: [{"thing":{"key":550,"value":"number 550"}},{"thing":{"key":928,"value":"number 928"}},{"thing":{"key":249,"value":"number 249"}},{"thing":{"key":761,"value":"number 761"}},{"thing":{"key":449,"value":"number 449"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 31.506ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 16.569ms
  Expected size: 941. Actual size: 941
  SOL first 5: [{"key":15,"value":"number 15"},{"key":97,"value":"number 97"},{"key":73,"value":"number 73"},{"key":116,"value":"number 116"},{"key":89,"value":"number 89"}]
  SOL length: 941

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 1.973ms
  SOL first 5: [{"key":324,"value":"number 324"},{"key":391,"value":"number 391"},{"key":236,"value":"number 236"},{"key":612,"value":"number 612"},{"key":566,"value":"number 566"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 148.704ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 245.036ms
  Expected size: 991. Actual size: 991
  SOL first 5: [{"thing":{"key":11,"value":"number 11"}},{"thing":{"key":12,"value":"number 12"}},{"thing":{"key":14,"value":"number 14"}},{"thing":{"key":18,"value":"number 18"}},{"thing":{"key":41,"value":"number 41"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 20.279ms
  SOL first 5: [{"thing":{"key":185,"value":"number 185"}},{"thing":{"key":872,"value":"number 872"}},{"thing":{"key":655,"value":"number 655"}},{"thing":{"key":84,"value":"number 84"}},{"thing":{"key":739,"value":"number 739"}}]



PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"max":false}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
node:  -> @Empty 	  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> 9 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 11
node:  -> 999 	node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  
  Trie. Size: 1
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 161.463ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 186.99ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 488.787ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Tests complete.


