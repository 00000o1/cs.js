{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      iterativeBinarySearch: [Function: iterativeBinarySearch],
      recursiveBinarySearch: [Function: recursiveBinarySearch]
    },
    BubbleSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    HeapSort: [Object: null prototype] [Module] {
      default: [Function: HeapSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: HeapSort]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    LinkedList: [Object: null prototype] [Module] {
      Class: [class LinkedList],
      Node: [class Node],
      create: [Function: create],
      default: [class LinkedList]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      findKth: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SelectionSort: [Object: null prototype] [Module] {
      default: [Function: SelectionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: SelectionSort]
    },
    SingList: [Object: null prototype] [Module] {
      Class: [class SingList],
      create: [Function: create],
      default: [class SingList]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Tree: [Object: null prototype] [Module] {
      Empty: Symbol(@Empty),
      Node: [class Node],
      Tree: [class Tree],
      default: [class Tree]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

[ 1, 2, 3 ]
[ 3, 2, 1 ]
[ 1, 2, 3 ]
Singly linked list test passed.
LinkedList test passed.
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 40.52ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 16.539ms
  Expected size: 939. Actual size: 939
  SOL first 5: [{"key":17,"value":"number 17"},{"key":34,"value":"number 34"},{"key":38,"value":"number 38"},{"key":45,"value":"number 45"},{"key":98,"value":"number 98"}]
  SOL length: 939

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 3.375ms
  SOL first 5: [{"key":633,"value":"number 633"},{"key":246,"value":"number 246"},{"key":576,"value":"number 576"},{"key":732,"value":"number 732"},{"key":842,"value":"number 842"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 187.988ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 255.973ms
  Expected size: 948. Actual size: 948
  SOL first 5: [{"thing":{"key":43,"value":"number 43"}},{"thing":{"key":52,"value":"number 52"}},{"thing":{"key":82,"value":"number 82"}},{"thing":{"key":134,"value":"number 134"}},{"thing":{"key":53,"value":"number 53"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 27.465ms
  SOL first 5: [{"thing":{"key":661,"value":"number 661"}},{"thing":{"key":105,"value":"number 105"}},{"thing":{"key":111,"value":"number 111"}},{"thing":{"key":744,"value":"number 744"}},{"thing":{"key":306,"value":"number 306"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 34.136ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 12.892ms
  Expected size: 929. Actual size: 929
  SOL first 5: [{"key":10,"value":"number 10"},{"key":28,"value":"number 28"},{"key":19,"value":"number 19"},{"key":39,"value":"number 39"},{"key":47,"value":"number 47"}]
  SOL length: 929

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 2.833ms
  SOL first 5: [{"key":791,"value":"number 791"},{"key":756,"value":"number 756"},{"key":651,"value":"number 651"},{"key":545,"value":"number 545"},{"key":216,"value":"number 216"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 187.859ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 249.045ms
  Expected size: 1000. Actual size: 1000
  SOL first 5: [{"thing":{"key":12,"value":"number 12"}},{"thing":{"key":42,"value":"number 42"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":29,"value":"number 29"}},{"thing":{"key":66,"value":"number 66"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 19.878ms
  SOL first 5: [{"thing":{"key":341,"value":"number 341"}},{"thing":{"key":814,"value":"number 814"}},{"thing":{"key":99,"value":"number 99"}},{"thing":{"key":27,"value":"number 27"}},{"thing":{"key":17,"value":"number 17"}}]

Scale test heap as tree...
{ size: 1000, heapTop: 999, actual: { min: 4, max: 999 } }
  Heap As Tree 1000 insertions: 47.876ms
Scale test heap as list...
{ size: 1000000, heapTop: 999998, actual: { min: 0, max: 999998 } }
  Heap As List 1000000 insertions: 144.997ms
New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
  
  
  Row: 1
node: 5 	
  
  
  Row: 2
node: 3 	node: 4 	
  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
  
  
  Row: 1
node: 9 	
  
  
  Row: 2
node: 8 	node: 7 	
  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.




PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"invert":true}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> 9 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 12
node:  -> 999 	node:  -> @Empty 	
  
  
  
  
  Trie. Size: 1
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  	Row: 12
node:  -> @Empty 	
  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 20.385ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 14.656ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 43.152ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 76.986ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 10:  783
Row: 9:  783
Row: 8:  464 618 783
Row: 7:  464 618 783
Row: 6:  25 105 409 464 480 490 618 627 760 783 917 935 952
Row: 5:  25 79 105 200 365 405 409 464 480 490 498 514 517 617 618 627 695 743 760 776 778 783 804 900 917 921 922 935 952
Row: 4:  15 25 77 79 104 105 134 148 158 200 291 294 337 348 365 368 405 409 460 464 478 480 482 490 498 503 514 517 543 607 617 618 620 627 642 657 660 695 725 736 743 760 761 776 778 781 782 783 804 850 871 900 917 921 922 935 941 952
Row: 3:  15 16 19 25 46 73 77 79 98 104 105 110 118 120 126 129 134 140 148 158 200 206 231 247 285 291 294 299 322 328 330 333 336 337 344 348 365 368 395 403 405 409 411 429 434 438 445 460 464 465 469 478 480 482 490 498 503 507 514 517 522 536 543 544 548 566 578 592 600 607 617 618 620 624 627 640 641 642 657 660 661 687 695 706 708 719 725 736 743 744 760 761 767 776 778 781 782 783 804 807 808 833 835 844 848 850 853 871 900 910 917 921 922 923 935 938 941 947 951 952 962 974 977 994
Row
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 1:  5
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 3:  2
Row: 2:  6 2
Row: 1:  6 5 4 3 2 1 0 -1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 3:  2 1
Row: 2:  5 4 2 1
Row: 1:  -1 5 4 2 1 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 32.703ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 17.473ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 25.555ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 27.652ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 49.774ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 24.27ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 306. Actual size: 306

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 317. Actual size: 317

Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 174.198ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 172.525ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 2.92ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 2.566ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 1.8ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 2.788ms
  QuickSelect test passed.


HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 72.197ms
{ lastVal: 9930 }
  HeapSort test passed.

HeapSort test: {"opts":{"max":true}}. Length: 10000
  HeapSort test: 45.007ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 39.423ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true,"max":true}}. Length: 10000
  HeapSort test: 36.284ms
{ lastVal: 9837 }
  HeapSort test passed.

HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 59.725ms
{ lastVal: 9933 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 39.186ms
{ lastVal: 9777 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":false}}. Length: 10000
  HeapSort test: 39.799ms
{ lastVal: 9882 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 38.023ms
{ lastVal: 0 }
  HeapSort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 7.568ms
{ lastVal: 2412 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 7.769ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 8.628ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 4.037ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nosplice":true}}. Length: 2500
  Insertion Sort test: 28.485ms
{ lastVal: 2452 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":false}}. Length: 2500
  Insertion Sort test: 4.506ms
{ lastVal: 2436 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":true}}. Length: 2500
  Insertion Sort test: 99.652ms
{ lastVal: 2439 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":false,"nobs":true}}. Length: 2500
  Insertion Sort test: 106.48ms
{ lastVal: 2415 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":false,"nosplice":true}}. Length: 2500
  Insertion Sort test: 8.176ms
{ lastVal: 2429 }
  Insertion Sort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 11.358ms
{ lastVal: 9958 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 12.804ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 13.043ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 6.407ms
{ lastVal: 0 }
  MergeSort test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 20.355ms
{ lastVal: 9921 }
  QuickSort test passed.

QuickSort test: {"opts":{"iterative":true}}. Length: 10000
  QuickSort test: 13.341ms
{ lastVal: 9819 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 19.549ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 7.515ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 7.331ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 10000
  QuickSort test: 6.888ms
{ lastVal: 9860 }
  QuickSort test passed.

Selection Sort test: {"opts":{}}. Length: 2500
  Selection Sort test: 116.276ms
{ lastVal: 2362 }
  Selection Sort test passed.

Selection Sort test: {"opts":{}}. Length: 2500
  Selection Sort test: 93.863ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"invert":true}}. Length: 2500
  Selection Sort test: 121.904ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"invert":true}}. Length: 2500
  Selection Sort test: 100.689ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"inplace":false}}. Length: 2500
  Selection Sort test: 116.083ms
{ lastVal: 2412 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"inplace":false,"nosplice":false}}. Length: 2500
  Selection Sort test: 115.243ms
{ lastVal: 2455 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"nosplice":false}}. Length: 2500
  Selection Sort test: 121.417ms
{ lastVal: 2460 }
  Selection Sort test passed.

Bubble Sort test: {"opts":{}}. Length: 2500
  Bubble Sort test: 5.865ms
{ lastVal: 2450 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{}}. Length: 2500
  Bubble Sort test: 5.762ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"invert":true}}. Length: 2500
  Bubble Sort test: 4.595ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"invert":true}}. Length: 2500
  Bubble Sort test: 4.895ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true}}. Length: 2500
  Bubble Sort test: 5.829ms
{ lastVal: 2419 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true,"nosplice":true}}. Length: 2500
  Bubble Sort test: 22.14ms
{ lastVal: 2462 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true,"nobs":true}}. Length: 2500
  Bubble Sort test: 99.087ms
{ lastVal: 2425 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"nobs":true}}. Length: 2500
  Bubble Sort test: 141.088ms
{ lastVal: 2448 }
  Bubble Sort test passed.
Tests complete.


