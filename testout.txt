{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      iterativeBinarySearch: [Function: iterativeBinarySearch],
      recursiveBinarySearch: [Function: recursiveBinarySearch]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    HeapSort: [Object: null prototype] [Module] {
      default: [Function: HeapSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: HeapSort]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    LinkedList: [Object: null prototype] [Module] {
      Class: [class LinkedList],
      Node: [class Node],
      create: [Function: create],
      default: [class LinkedList]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      findKth: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SingList: [Object: null prototype] [Module] {
      Class: [class SingList],
      create: [Function: create],
      default: [class SingList]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Tree: [Object: null prototype] [Module] {
      Empty: Symbol(@Empty),
      Node: [class Node],
      Tree: [class Tree],
      default: [class Tree]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

[ 1, 2, 3 ]
[ 3, 2, 1 ]
[ 1, 2, 3 ]
Singly linked list test passed.
LinkedList test passed.
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 37.574ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 18.112ms
  Expected size: 944. Actual size: 944
  SOL first 5: [{"key":11,"value":"number 11"},{"key":14,"value":"number 14"},{"key":26,"value":"number 26"},{"key":18,"value":"number 18"},{"key":32,"value":"number 32"}]
  SOL length: 944

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 3.835ms
  SOL first 5: [{"key":268,"value":"number 268"},{"key":481,"value":"number 481"},{"key":628,"value":"number 628"},{"key":501,"value":"number 501"},{"key":958,"value":"number 958"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 169.324ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 220.506ms
  Expected size: 955. Actual size: 955
  SOL first 5: [{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":25,"value":"number 25"}},{"thing":{"key":30,"value":"number 30"}},{"thing":{"key":11,"value":"number 11"}},{"thing":{"key":40,"value":"number 40"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 22.323ms
  SOL first 5: [{"thing":{"key":837,"value":"number 837"}},{"thing":{"key":330,"value":"number 330"}},{"thing":{"key":256,"value":"number 256"}},{"thing":{"key":243,"value":"number 243"}},{"thing":{"key":371,"value":"number 371"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 31.682ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 14.913ms
  Expected size: 938. Actual size: 938
  SOL first 5: [{"key":33,"value":"number 33"},{"key":67,"value":"number 67"},{"key":53,"value":"number 53"},{"key":57,"value":"number 57"},{"key":101,"value":"number 101"}]
  SOL length: 938

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 1.849ms
  SOL first 5: [{"key":453,"value":"number 453"},{"key":698,"value":"number 698"},{"key":502,"value":"number 502"},{"key":12,"value":"number 12"},{"key":820,"value":"number 820"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 128.562ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 228.044ms
  Expected size: 910. Actual size: 910
  SOL first 5: [{"thing":{"key":15,"value":"number 15"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":54,"value":"number 54"}},{"thing":{"key":13,"value":"number 13"}},{"thing":{"key":11,"value":"number 11"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 18.821ms
  SOL first 5: [{"thing":{"key":842,"value":"number 842"}},{"thing":{"key":47,"value":"number 47"}},{"thing":{"key":410,"value":"number 410"}},{"thing":{"key":703,"value":"number 703"}},{"thing":{"key":903,"value":"number 903"}}]

Scale test heap as tree...
{ size: 1000, heapTop: 999, actual: { min: 1, max: 999 } }
  Heap As Tree 1000 insertions: 44.842ms
Scale test heap as list...
{ size: 1000000, heapTop: 999999, actual: { min: 2, max: 999999 } }
  Heap As List 1000000 insertions: 124.275ms
New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
  
  
  Row: 1
node: 5 	
  
  
  Row: 2
node: 3 	node: 4 	
  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
  
  
  Row: 1
node: 9 	
  
  
  Row: 2
node: 8 	node: 7 	
  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.




PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"invert":true}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> 9 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 12
node:  -> 999 	node:  -> @Empty 	
  
  
  
  
  Trie. Size: 1
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  	Row: 12
node:  -> @Empty 	
  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 19.603ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 17.668ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 49.554ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 78.452ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 10:  392 830
Row: 9:  392 475 830
Row: 8:  189 392 475 824 830
Row: 7:  189 392 475 705 824 830 966
Row: 6:  92 170 189 229 296 365 392 439 475 493 705 727 824 830 848 911 917 966 978
Row: 5:  92 170 189 202 229 235 296 329 333 365 392 396 439 442 475 491 493 518 668 705 727 734 824 830 848 911 917 953 954 966 978
Row: 4:  9 53 66 92 146 170 189 202 221 226 229 235 296 320 329 333 343 365 369 392 396 439 442 463 475 491 493 518 551 555 631 660 668 677 686 705 707 727 734 751 807 824 830 848 870 911 917 929 949 953 954 966 978 984 994
Row: 3:  9 14 27 38 39 41 45 53 64 66 77 92 109 114 119 128 146 161 170 173 177 181 189 202 209 221 225 226 227 229 232 235 283 296 300 315 320 323 329 333 341 343 365 369 378 380 383 392 396 425 439 442 463 475 491 493 502 503 507 518 540 551 555 568 569 589 619 631 660 668 677 681 686 705 707 724 727 734 751 754 763 764 765 771 792 804 807 813 823 824 830 842 848 870 891 895 902 906 911 917 929 934 949 953 954 961 966 974 978 984 985 994 996 997
Row: 2:  9 14 17 18 19 23 27 28 32 38 39 41 45 50 53 57 58 62 64 66 77 78 87 92 100 102 104 109 113 114 119 128 129 143 144 146 148 152 153 161 165 166 170 173 177 181 182 184 189 196 198 201 202 209 220 221 225 226 227 229 232 233 235 250 255 258 262 266 270 272 274 277 282 283 296 300 308 315 320 323 324 327 329 333 340 341 343 353 358 365 369 372 374 378 380 383 389 392 396 399 402 406 407 410 425 437 439 442 444 446 455 463 468 475 479 481 491 493 497 502 503 507 510 518 524 533 534 535 537 540 541 551 555 556 568 569 570 574 577 584 586 589 591 594 606 609 610 615 617 619 622 623 625 627 631 635 640 660 662 668 670 674 677 681 682 686 689 693 705 707 715 716 724 725 727 730 731 734 735 738 747 751 752 753 754 763 764 765 768 771 779 780 789 792 797 804 805 807 808 813 815 819 820 823 824 827 829 830 835 842 843 848 852 856 863 864 870 878 887 890 891 895 897 902 906 911 914 917 929 934 949 951 953 954 955 961 963 966 969 974 976 978 983 984 985 991 994 996 997
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 3:  3
Row: 2:  3
Row: 1:  3 5
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 4:  3
Row: 3:  3
Row: 2:  3
Row: 1:  5 4 3 2 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 6:  3
Row: 5:  3
Row: 4:  -1 3
Row: 3:  -1 6 3
Row: 2:  -1 6 4 3 2
Row: 1:  -1 6 4 3 2
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 29.335ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 21.217ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 29.447ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 28.809ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 46.411ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 27.735ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 306. Actual size: 306

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 296. Actual size: 296

Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 164.368ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 138.4ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 2.638ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 3.032ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 1.634ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 2.14ms
  QuickSelect test passed.


HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 50.121ms
{ lastVal: 9934 }
  HeapSort test passed.

HeapSort test: {"opts":{"max":true}}. Length: 10000
  HeapSort test: 44.628ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 38.411ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true,"max":true}}. Length: 10000
  HeapSort test: 37.507ms
{ lastVal: 9914 }
  HeapSort test passed.

HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 61.376ms
{ lastVal: 9842 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 42.558ms
{ lastVal: 9902 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":false}}. Length: 10000
  HeapSort test: 40.665ms
{ lastVal: 9963 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 42.203ms
{ lastVal: 0 }
  HeapSort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 8.979ms
{ lastVal: 2443 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 9.471ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 9.853ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 5.544ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true}}. Length: 2500
  Insertion Sort test: 5.405ms
{ lastVal: 2444 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nosplice":true}}. Length: 2500
  Insertion Sort test: 29.633ms
{ lastVal: 2417 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nobs":true}}. Length: 2500
  Insertion Sort test: 97.143ms
{ lastVal: 2398 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":true}}. Length: 2500
  Insertion Sort test: 137.747ms
{ lastVal: 2464 }
  Insertion Sort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 13.187ms
{ lastVal: 9885 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 14.186ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 16.627ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 7.231ms
{ lastVal: 0 }
  MergeSort test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 19.956ms
{ lastVal: 9801 }
  QuickSort test passed.

QuickSort test: {"opts":{"iterative":true}}. Length: 10000
  QuickSort test: 13.874ms
{ lastVal: 9956 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 17.189ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 6.896ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 8.742ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 10000
  QuickSort test: 6.394ms
{ lastVal: 9767 }
  QuickSort test passed.
Tests complete.


