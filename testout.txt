{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      signedCompare: [Function: signedCompare]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

QuickSelect test. List length: 10000. K-th order trials: 300
  QuickSelect 300 trials.: 4.576ms
  QuickSelect test passed.
QuickSelect test. List length: 10000. K-th order trials: 300
  QuickSelect 300 trials.: 4.332ms
  QuickSelect test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 9.75ms
{ lastVal: 9962 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 32.835ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 17.624ms
{ lastVal: 9880 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 34.42ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"fastPartition":false}}. Length: 10000
  QuickSort test: 5.02ms
{ lastVal: 9849 }
  QuickSort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 14.927ms
{ lastVal: 9604 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 13.976ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 14.75ms
{ lastVal: 9937 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 9.157ms
{ lastVal: 0 }
  MergeSort test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 75.18ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 9:  361
Row: 8:  361
Row: 7:  126 284 318 361 442 457
Row: 6:  126 205 284 299 313 318 361 442 457 600 604 875
Row: 5:  4 57 70 126 179 205 208 256 275 284 299 313 318 324 361 442 457 492 519 600 604 686 702 714 760 770 784 799 847 874 875 901 914
Row: 4:  4 7 28 41 57 61 70 80 91 110 126 179 205 208 224 243 256 275 284 299 313 318 324 361 365 442 457 469 488 492 494 506 514 519 538 552 568 600 604 611 654 686 696 702 714 732 760 770 784 799 804 825 847 874 875 880 901 908 914 939 945 978
Row: 3:  2 4 6 7 16 23 28 41 47 57 61 68 70 71 80 91 107 110 113 120 126 179 193 199 205 208 224 236 237 243 256 257 275 278 283 284 295 296 299 304 313 318 324 330 334 335 358 361 365 441 442 457 468 469 471 488 492 494 501 506 514 517 519 538 549 552 559 568 569 574 575 600 604 611 620 630 633 654 664 682 686 696 702 714 715 732 733 748 749 753 760 770 784 799 804 807 825 836 847 849 864 873 874 875 877 880 901 903 908 914 922 939 945 948 950 954 965 978 980 981
Row
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 5:  2
Row: 4:  2
Row: 3:  2
Row: 2:  2
Row: 1:  0 2 3 6
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 9:  6
Row: 8:  6
Row: 7:  6
Row: 6:  6
Row: 5:  6
Row: 4:  6
Row: 3:  6 5
Row: 2:  6 5 1
Row: 1:  6 5 2 1 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 7:  2
Row: 6:  2
Row: 5:  2
Row: 4:  2
Row: 3:  2
Row: 2:  4 2 1
Row: 1:  6 4 2 1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 539.811ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 400.38ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 613.376ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 470.928ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 641.107ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 592.209ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 305. Actual size: 305

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 282. Actual size: 282

Scale test heap as tree...
{ size: 5000, heapTop: 4999, actual: { min: 0, max: 4999 } }
  Heap As Tree 5000 insertions: 641.879ms
Scale test heap as list...
{ size: 5000000, heapTop: 4999999, actual: { min: 0, max: 4999999 } }
  Heap As List 5000000 insertions: 715.36ms
New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
node: 5 	  
  
  Row: 1
node: 3 	node: 4 	  
  
  Row: 2
node: 2 	node: 1 	  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
node: 9 	  
  
  Row: 1
node: 8 	node: 7 	  
  
  Row: 2
node: 5 	node: 6 	  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.


[ 3, 2, 1 ]
[ 1, 2, 3 ]
[ 3, 2, 1 ]
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 30.175ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 17.394ms
  Expected size: 924. Actual size: 924
  SOL first 5: [{"key":18,"value":"number 18"},{"key":24,"value":"number 24"},{"key":14,"value":"number 14"},{"key":42,"value":"number 42"},{"key":57,"value":"number 57"}]
  SOL length: 924

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 2.046ms
  SOL first 5: [{"key":131,"value":"number 131"},{"key":631,"value":"number 631"},{"key":463,"value":"number 463"},{"key":109,"value":"number 109"},{"key":803,"value":"number 803"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 186.833ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 246.167ms
  Expected size: 974. Actual size: 974
  SOL first 5: [{"thing":{"key":12,"value":"number 12"}},{"thing":{"key":43,"value":"number 43"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":77,"value":"number 77"}},{"thing":{"key":70,"value":"number 70"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 26.932ms
  SOL first 5: [{"thing":{"key":800,"value":"number 800"}},{"thing":{"key":305,"value":"number 305"}},{"thing":{"key":425,"value":"number 425"}},{"thing":{"key":412,"value":"number 412"}},{"thing":{"key":673,"value":"number 673"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 34.628ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 13.368ms
  Expected size: 973. Actual size: 973
  SOL first 5: [{"key":13,"value":"number 13"},{"key":22,"value":"number 22"},{"key":16,"value":"number 16"},{"key":35,"value":"number 35"},{"key":29,"value":"number 29"}]
  SOL length: 973

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 1.681ms
  SOL first 5: [{"key":828,"value":"number 828"},{"key":827,"value":"number 827"},{"key":378,"value":"number 378"},{"key":135,"value":"number 135"},{"key":281,"value":"number 281"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 146.764ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 242.713ms
  Expected size: 929. Actual size: 929
  SOL first 5: [{"thing":{"key":13,"value":"number 13"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":10,"value":"number 10"}},{"thing":{"key":46,"value":"number 46"}},{"thing":{"key":34,"value":"number 34"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 22.045ms
  SOL first 5: [{"thing":{"key":896,"value":"number 896"}},{"thing":{"key":381,"value":"number 381"}},{"thing":{"key":530,"value":"number 530"}},{"thing":{"key":821,"value":"number 821"}},{"thing":{"key":430,"value":"number 430"}}]



PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"max":false}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
node:  -> @Empty 	  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> 9 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 11
node:  -> 999 	node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  
  Trie. Size: 1
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 171.526ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 201.153ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 470.584ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Tests complete.


