{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      iterativeBinarySearch: [Function: iterativeBinarySearch],
      recursiveBinarySearch: [Function: recursiveBinarySearch]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    LinkedList: [Object: null prototype] [Module] {
      Class: [class LinkedList],
      Node: [class Node],
      create: [Function: create],
      default: [class LinkedList]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      findKth: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SingList: [Object: null prototype] [Module] {
      Class: [class SingList],
      create: [Function: create],
      default: [class SingList]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Tree: [Object: null prototype] [Module] {
      Empty: Symbol(@Empty),
      Node: [class Node],
      Tree: [class Tree],
      default: [class Tree]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

[ 1, 2, 3 ]
[ 3, 2, 1 ]
[ 1, 2, 3 ]
Singly linked list test passed.
LinkedList test passed.
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 45.171ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 19.057ms
  Expected size: 938. Actual size: 938
  SOL first 5: [{"key":65,"value":"number 65"},{"key":11,"value":"number 11"},{"key":81,"value":"number 81"},{"key":58,"value":"number 58"},{"key":37,"value":"number 37"}]
  SOL length: 938

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 4.662ms
  SOL first 5: [{"key":978,"value":"number 978"},{"key":807,"value":"number 807"},{"key":995,"value":"number 995"},{"key":541,"value":"number 541"},{"key":881,"value":"number 881"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 282.116ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 389.45ms
  Expected size: 926. Actual size: 926
  SOL first 5: [{"thing":{"key":11,"value":"number 11"}},{"thing":{"key":21,"value":"number 21"}},{"thing":{"key":29,"value":"number 29"}},{"thing":{"key":18,"value":"number 18"}},{"thing":{"key":19,"value":"number 19"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 33.995ms
  SOL first 5: [{"thing":{"key":878,"value":"number 878"}},{"thing":{"key":992,"value":"number 992"}},{"thing":{"key":625,"value":"number 625"}},{"thing":{"key":371,"value":"number 371"}},{"thing":{"key":654,"value":"number 654"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 38.961ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 15.301ms
  Expected size: 947. Actual size: 947
  SOL first 5: [{"key":16,"value":"number 16"},{"key":29,"value":"number 29"},{"key":14,"value":"number 14"},{"key":49,"value":"number 49"},{"key":69,"value":"number 69"}]
  SOL length: 947

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 3.568ms
  SOL first 5: [{"key":343,"value":"number 343"},{"key":143,"value":"number 143"},{"key":693,"value":"number 693"},{"key":562,"value":"number 562"},{"key":305,"value":"number 305"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 172.158ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 323.114ms
  Expected size: 945. Actual size: 945
  SOL first 5: [{"thing":{"key":51,"value":"number 51"}},{"thing":{"key":57,"value":"number 57"}},{"thing":{"key":60,"value":"number 60"}},{"thing":{"key":38,"value":"number 38"}},{"thing":{"key":93,"value":"number 93"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 28.777ms
  SOL first 5: [{"thing":{"key":471,"value":"number 471"}},{"thing":{"key":928,"value":"number 928"}},{"thing":{"key":767,"value":"number 767"}},{"thing":{"key":314,"value":"number 314"}},{"thing":{"key":21,"value":"number 21"}}]

Scale test heap as tree...
{ size: 1000, heapTop: 999, actual: { min: 1, max: 999 } }
  Heap As Tree 1000 insertions: 56.88ms
Scale test heap as list...
{ size: 1000000, heapTop: 999999, actual: { min: 0, max: 999999 } }
  Heap As List 1000000 insertions: 167.558ms
New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
node: 5 	  
  
  Row: 1
node: 3 	node: 4 	  
  
  Row: 2
node: 2 	node: 1 	  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
node: 9 	  
  
  Row: 1
node: 8 	node: 7 	  
  
  Row: 2
node: 5 	node: 6 	  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.




PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"max":false}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
node:  -> @Empty 	  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> 9 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 11
node:  -> 999 	node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  
  Trie. Size: 1
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 29.479ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 26.713ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 76.85ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 95.938ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 8:  497 607 933 997
Row: 7:  497 607 862 933 997
Row: 6:  82 184 497 604 607 760 862 921 933 997
Row: 5:  20 35 82 141 184 195 234 275 497 512 552 596 604 607 678 704 705 760 862 889 921 933 939 942 978 997
Row: 4:  20 35 47 53 71 82 96 98 107 113 120 125 141 144 148 184 195 227 234 275 297 316 385 389 411 473 486 497 512 545 552 565 573 588 596 604 607 648 657 670 678 695 704 705 760 779 804 813 833 862 888 889 921 933 939 942 954 978 997
Row: 3:  7 17 20 29 35 42 47 53 57 67 71 82 83 96 98 107 110 113 120 125 129 137 141 143 144 147 148 159 184 195 197 200 203 204 206 227 229 234 238 245 262 264 269 275 288 290 293 297 316 317 319 332 350 351 357 369 382 385 387 389 403 411 435 473 477 486 488 497 512 515 521 529 545 548 551 552 563 564 565 569 573 588 594 595 596 604 607 624 627 632 638 648 657 658 660 670 678 688 690 692 695 698 704 705 706 760 770 779 804 810 813 833 847 862 879 888 889 900 907 913 921 933 939 942 954 978 993 994 997
Row: 2:  7 11 15 17 20 24 29 35 40 42 44 47 52 53 54 57 67 68 70 71 75 78 82 83 86 94 96 98 100 103 105 107 108 110 113 115 116 117 120 121 125 129 132 134 137 140 141 143 144 147 148 149 150 159 160 161 162 166 172 184 195 197 200 203 204 205 206 208 212 217 221 223 227 229 230 234 238 242 245 251 252 256 262 264 269 270 271 275 281 288 290 291 292 293 297 309 314 316 317 319 322 329 332 335 336 340 343 345 350 351 354 355 357 368 369 374 380 382 385 387 388 389 403 406 411 415 416 417 418 419 435 452 467 473 477 478 480 481 483 486 488 491 497 512 515 516 521 529 534 536 544 545 548 551 552 553 561 563 564 565 569 570 573 578 588 590 594 595 596 604 607 614 615 618 624 627 629 632 638 648 652 657 658 660 661 669 670 672 674 678 688 690 692 693 695 697 698 699 704 705 706 711 716 719 721 727 729 740 757 760 770 772 774 777 779 784 786 789 795 803 804 810 813 829 830 832 833 834 839 840 843 845 847 848 850 861 862 868 873 874 879 888 889 895 899 900 901 902 904 907 913 916 918 921 925 933 939 942 952 954 955 960 966 978 982 985 987 993 994 995 997
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 1:  0 4
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 3:  3
Row: 2:  3 2
Row: 1:  3 2 1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 1:  2 1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 53.171ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 32.453ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 40.594ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 38.39ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 66.829ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 36.706ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 313. Actual size: 313

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 308. Actual size: 308

Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 253.441ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 191.599ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 2.085ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 2.571ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 1.468ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 2.765ms
  QuickSelect test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 9.469ms
{ lastVal: 2444 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 14.396ms
{ lastVal: 2414 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 9.912ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 15.354ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true}}. Length: 2500
  Insertion Sort test: 5.656ms
{ lastVal: 2417 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nosplice":true}}. Length: 2500
  Insertion Sort test: 36.08ms
{ lastVal: 2468 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nobs":true}}. Length: 2500
  Insertion Sort test: 145.981ms
{ lastVal: 2451 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":true}}. Length: 2500
  Insertion Sort test: 242.183ms
{ lastVal: 2436 }
  Insertion Sort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 13.744ms
{ lastVal: 9921 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 21.547ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 15.64ms
{ lastVal: 9941 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 9.49ms
{ lastVal: 0 }
  MergeSort test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 13.322ms
{ lastVal: 9947 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 66.502ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 7.11ms
{ lastVal: 9872 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 41.102ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 10000
  QuickSort test: 7.113ms
{ lastVal: 9888 }
  QuickSort test passed.
Tests complete.


