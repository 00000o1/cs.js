{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      iterativeBinarySearch: [Function: iterativeBinarySearch],
      recursiveBinarySearch: [Function: recursiveBinarySearch]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    HeapSort: [Object: null prototype] [Module] {
      default: [Function: HeapSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: HeapSort]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    LinkedList: [Object: null prototype] [Module] {
      Class: [class LinkedList],
      Node: [class Node],
      create: [Function: create],
      default: [class LinkedList]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      findKth: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SingList: [Object: null prototype] [Module] {
      Class: [class SingList],
      create: [Function: create],
      default: [class SingList]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Tree: [Object: null prototype] [Module] {
      Empty: Symbol(@Empty),
      Node: [class Node],
      Tree: [class Tree],
      default: [class Tree]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

[ 1, 2, 3 ]
[ 3, 2, 1 ]
[ 1, 2, 3 ]
Singly linked list test passed.
LinkedList test passed.
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 34.006ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 20.304ms
  Expected size: 953. Actual size: 953
  SOL first 5: [{"key":21,"value":"number 21"},{"key":42,"value":"number 42"},{"key":51,"value":"number 51"},{"key":100,"value":"number 100"},{"key":118,"value":"number 118"}]
  SOL length: 953

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 4.399ms
  SOL first 5: [{"key":446,"value":"number 446"},{"key":30,"value":"number 30"},{"key":449,"value":"number 449"},{"key":401,"value":"number 401"},{"key":347,"value":"number 347"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 227.35ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 317.388ms
  Expected size: 962. Actual size: 962
  SOL first 5: [{"thing":{"key":14,"value":"number 14"}},{"thing":{"key":19,"value":"number 19"}},{"thing":{"key":43,"value":"number 43"}},{"thing":{"key":55,"value":"number 55"}},{"thing":{"key":59,"value":"number 59"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 31.237ms
  SOL first 5: [{"thing":{"key":298,"value":"number 298"}},{"thing":{"key":728,"value":"number 728"}},{"thing":{"key":900,"value":"number 900"}},{"thing":{"key":104,"value":"number 104"}},{"thing":{"key":473,"value":"number 473"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 34.224ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 21.621ms
  Expected size: 1011. Actual size: 1011
  SOL first 5: [{"key":11,"value":"number 11"},{"key":43,"value":"number 43"},{"key":44,"value":"number 44"},{"key":41,"value":"number 41"},{"key":23,"value":"number 23"}]
  SOL length: 1011

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 2.082ms
  SOL first 5: [{"key":454,"value":"number 454"},{"key":150,"value":"number 150"},{"key":638,"value":"number 638"},{"key":841,"value":"number 841"},{"key":495,"value":"number 495"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 175.587ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 289.919ms
  Expected size: 914. Actual size: 914
  SOL first 5: [{"thing":{"key":23,"value":"number 23"}},{"thing":{"key":38,"value":"number 38"}},{"thing":{"key":39,"value":"number 39"}},{"thing":{"key":14,"value":"number 14"}},{"thing":{"key":15,"value":"number 15"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 27.153ms
  SOL first 5: [{"thing":{"key":980,"value":"number 980"}},{"thing":{"key":254,"value":"number 254"}},{"thing":{"key":889,"value":"number 889"}},{"thing":{"key":186,"value":"number 186"}},{"thing":{"key":2,"value":"number 2"}}]

Scale test heap as tree...
{
  invert: false,
  asTree: true,
  max: true,
  arity: 8,
  compare: undefined
}
{ size: 1000, heapTop: 999, actual: { min: 0, max: 999 } }
  Heap As Tree 1000 insertions: 55.41ms
Scale test heap as list...
{
  invert: false,
  asTree: false,
  max: true,
  arity: 8,
  compare: undefined
}
{ size: 1000000, heapTop: 999999, actual: { min: 0, max: 999999 } }
  Heap As List 1000000 insertions: 172.449ms
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }

{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
{
  invert: false,
  asTree: false,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
{
  invert: false,
  asTree: false,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
{
  invert: false,
  asTree: false,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
{
  invert: false,
  asTree: false,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
{
  invert: false,
  asTree: false,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
{
  invert: false,
  asTree: true,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: true,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
{
  invert: false,
  asTree: true,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: true,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
{
  invert: false,
  asTree: true,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: true,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
{
  invert: false,
  asTree: true,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: false,
  arity: 2,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
{
  invert: false,
  asTree: true,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: false,
  arity: 4,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
{
  invert: false,
  asTree: true,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: false,
  arity: 8,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
{
  invert: false,
  asTree: true,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: true,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: true,
  max: false,
  arity: 5,
  compare: undefined
}
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
{
  invert: false,
  asTree: false,
  max: false,
  arity: 2,
  compare: undefined
}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: undefined
}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: undefined
}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
{
  invert: false,
  asTree: true,
  max: false,
  arity: 2,
  compare: undefined
}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
{
  invert: false,
  asTree: true,
  max: true,
  arity: 4,
  compare: undefined
}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
{
  invert: false,
  asTree: true,
  max: false,
  arity: 4,
  compare: undefined
}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
  
  
  Row: 1
node: 5 	
  
  
  Row: 2
node: 3 	node: 4 	
  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
  
  
  Row: 1
node: 9 	
  
  
  Row: 2
node: 8 	node: 7 	
  
  
  
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Test passed.


Heap huge merge test
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
{
  invert: false,
  asTree: true,
  max: true,
  arity: 2,
  compare: undefined
}
  Size test: true
  Test passed.




PQ order test testing opts: ""
  Run: 1
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: true,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"max":false}
  Run: 1
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 1
  Run: 2
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 2
  Run: 3
{
  invert: false,
  asTree: false,
  max: false,
  arity: 4,
  compare: [Function: compare]
}
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> 9 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 12
node:  -> 999 	node:  -> @Empty 	
  
  
  
  
  Trie. Size: 1
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  	Row: 12
node:  -> @Empty 	
  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 24.554ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 20.966ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 45.539ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 80.372ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 10:  428
Row: 9:  16 428
Row: 8:  16 61 114 240 428 568 657
Row: 7:  16 61 114 240 287 428 523 568 657 671 748 976
Row: 6:  16 61 114 196 199 240 285 287 326 400 428 508 523 547 568 657 671 748 753 853 919 976
Row: 5:  16 29 61 114 123 196 199 218 240 285 287 326 338 364 400 420 428 431 508 523 536 541 547 568 632 634 657 671 732 748 753 754 853 919 976
Row: 4:  2 3 16 29 61 69 72 75 76 114 122 123 175 196 197 199 210 218 234 240 258 285 287 297 303 326 338 364 375 376 380 382 400 420 428 431 476 508 523 536 541 547 548 568 573 587 592 610 632 633 634 657 671 700 726 728 732 748 753 754 778 781 842 853 907 919 926 950 976 992
Row: 3:  2 3 16 29 31 40 61 67 69 72 75 76 88 108 110 114 122 123 127 153 168 171 175 180 196 197 199 210 218 219 221 234 236 238 240 249 258 264 269 275 276 283 285 287 294 297 300 303 312 322 326 338 347 357 364 367 375 376 380 382 400 420 428 431 476 491 508 523 527 536 541 547 548 551 568 573 587 589 592 594 610 632 633 634 653 657 671 674 675 692 700 707 724 725 726 728 732 748 753 754 776 778 781 804 826 832 842 853 856 857 864 869 885 907 919 926 935 950 962 976 978 992
Row: 2:  2 3 4 16 17 18 28 29 30 31 35 36 40 49 52 61 65 67 69 72 73 75 76 83 85 87 88 95 108 110 111 114 117 120 122 123 127 136 144 145 152 153 154 162 168 170 171 175 177 180 183 194 196 197 199 206 210 218 219 221 227 229 234 236 238 240 244 249 252 254 258 264 269 274 275 276 283 285 287 294 297 300 303 307 312 314 317 322 326 327 333 335 338 341 347 356 357 364 367 373 375 376 380 381 382 385 388 393 400 408 417 420 428 431 435 444 454 462 463 464 466 467 469 476 477 479 489 491 492 493 498 499 503 508 513 515 518 523 527 531 536 541 542 547 548 551 553 561 566 568 572 573 577 578 579 583 585 587 589 591 592 594 610 620 629 632 633 634 641 653 657 662 671 672 674 675 678 684 692 693 700 705 706 707 714 718 721 722 724 725 726 727 728 732 733 734 736 747 748 753 754 757 768 774 776 778 781 783 794 804 809 825 826 832 834 840 842 852 853 856 857 864 865 866 869 871 873 885 892 893 896 901 906 907 911 912 919 923 926 929 935 937 939 946 950 957 959 962 963 973 974 976 977 978 984 990 992 998
Row: 1:  0 2 3 4 5 9 14 15 16 17 18 19 22 26 28 29 30 31 33 35 36 40 43 44 45 46 48 49 51 52 56 57 61 63 65 67 69 71 72 73 75 76 81 83 85 87 88 94 95 96 99 102 103 104 108 109 110 111 112 114 117 120 122 123 125 127 131 134 136 138 143 144 145 148 149 150 152 153 154 160 162 165 167 168 169 170 171 175 177 178 180 181 182 183 188 190 192 194 196 197 199 200 204 205 206 207 210 211 212 215 218 219 221 223 226 227 229 231 232 234 235 236 238 239 240 244 246 248 249 252 253 254 257 258 259 262 264 268 269 272 273 274 275 276 277 278 280 281 283 285 287 294 295 296 297 299 300 302 303 305 307 308 309 312 314 316 317 318 322 324 326 327 331 333 335 336 338 341 344 345 347 348 350 353 354 356 357 359 360 364 367 373 375 376 377 380 381 382 384 385 387 388 392 393 395 398 400 402 403 405 408 414 417 420 421 427 428 430 431 433 435 440 442 443 444 445 446 447 449 451 454 456 457 458 459 462 463 464 465 466 467 469 471 475 476 477 479 486 489 491 492 493 495 498 499 502 503 505 507 508 510 513 514 515 517 518 519 520 523 524 525 527 528 530 531 532 536 539 540 541 542 543 545 547 548 551 553 558 561 564 566 568 569 571 572 573 574 577 578 579 580 583 584 585 586 587 589 591 592 594 598 599 602 605 608 609 610 612 616 619 620 622 623 629 632 633 634 635 636 639 641 644 652 653 657 662 668 671 672 673 674 675 678 679 681 682 684 686 687 692 693 694 698 700 705 706 707 713 714 718 720 721 722 724 725 726 727 728 729 732 733 734 735 736 738 739 741 742 743 745 746 747 748 751 753 754 757 758 759 760 762 765 768 773 774 775 776 777 778 780 781 782 783 784 790 791 793 794 799 800 804 808 809 811 812 813 814 815 824 825 826 831 832 833 834 839 840 841 842 846 847 852 853 854 856 857 863 864 865 866 869 871 872 873 875 877 880 882 884 885 886 888 892 893 894 896 900 901 903 904 906 907 910 911 912 916 919 921 923 925 926 928 929 932 933 935 937 939 946 950 951 957 958 959 961 962 963 964 968 970 973 974 975 976 977 978 984 990 992 996 998
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 10:  4
Row: 9:  4
Row: 8:  4
Row: 7:  4
Row: 6:  4
Row: 5:  4
Row: 4:  4
Row: 3:  4
Row: 2:  4
Row: 1:  2 3 4
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 2:  5
Row: 1:  5 1 -1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 10:  6
Row: 9:  6
Row: 8:  6
Row: 7:  6
Row: 6:  6
Row: 5:  6
Row: 4:  6 2
Row: 3:  6 2
Row: 2:  6 2 0
Row: 1:  -1 6 4 2 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 44.649ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 26.477ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 31.403ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 24.334ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 42.596ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 22.381ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 298. Actual size: 298

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 326. Actual size: 326

Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 184.894ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 143.078ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 2.599ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 2.588ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 1.762ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 2.573ms
  QuickSelect test passed.


HeapSort test: {"opts":{}}. Length: 10000
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  HeapSort test: 75.094ms
{ lastVal: 9930 }

HeapSort test: {"opts":{"invert":true}}. Length: 10000
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  HeapSort test: 49.081ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{}}. Length: 10000
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  HeapSort test: 44.45ms
{ lastVal: 9892 }

HeapSort test: {"opts":{"invert":true}}. Length: 10000
{
  invert: false,
  asTree: false,
  max: true,
  arity: 2,
  compare: undefined
}
  HeapSort test: 44.814ms
{ lastVal: 0 }
  HeapSort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 8.012ms
{ lastVal: 2464 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 9.386ms
{ lastVal: 2395 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 10.105ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 5.65ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true}}. Length: 2500
  Insertion Sort test: 4.889ms
{ lastVal: 2383 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nosplice":true}}. Length: 2500
  Insertion Sort test: 26.533ms
{ lastVal: 2407 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":true,"nobs":true}}. Length: 2500
  Insertion Sort test: 96.711ms
{ lastVal: 2356 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":true}}. Length: 2500
  Insertion Sort test: 153.617ms
{ lastVal: 2401 }
  Insertion Sort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 11.688ms
{ lastVal: 9868 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 17.671ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 17.615ms
{ lastVal: 9864 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 7.197ms
{ lastVal: 0 }
  MergeSort test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 29.72ms
{ lastVal: 9928 }
  QuickSort test passed.

QuickSort test: {"opts":{"iterative":true}}. Length: 10000
  QuickSort test: 20.21ms
{ lastVal: 9923 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 24.42ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 6.826ms
{ lastVal: 9940 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 6.946ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 10000
  QuickSort test: 6.207ms
{ lastVal: 9906 }
  QuickSort test passed.
Tests complete.


