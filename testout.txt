{
  mainExport: [Object: null prototype] [Module] {
    BinarySearch: [Object: null prototype] [Module] {
      default: [Function: BinarySearch],
      find: [Function: BinarySearch],
      iterativeBinarySearch: [Function: iterativeBinarySearch],
      recursiveBinarySearch: [Function: recursiveBinarySearch]
    },
    BubbleSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    HeapSort: [Object: null prototype] [Module] {
      default: [Function: HeapSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: HeapSort]
    },
    InsertionSort: [Object: null prototype] [Module] {
      default: [Function: InsertionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: InsertionSort]
    },
    LinkedList: [Object: null prototype] [Module] {
      Class: [class LinkedList],
      Node: [class Node],
      create: [Function: create],
      default: [class LinkedList]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSelect: [Object: null prototype] [Module] {
      default: [Function: QuickSelect],
      findKth: [Function: QuickSelect],
      select: [Function: QuickSelect]
    },
    QuickSort: [Object: null prototype] [Module] {
      DEFAULT_COMPARE: [Function: DEFAULT_COMPARE],
      default: [Function: QuickSort],
      partition: [Function: partition],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort],
      swap: [Function: swap],
      tripartition: [Function: tripartition]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SelectionSort: [Object: null prototype] [Module] {
      default: [Function: SelectionSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: SelectionSort]
    },
    SingList: [Object: null prototype] [Module] {
      Class: [class SingList],
      create: [Function: create],
      default: [class SingList]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Tree: [Object: null prototype] [Module] {
      Empty: Symbol(@Empty),
      Node: [class Node],
      Tree: [class Tree],
      default: [class Tree]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}

Running tests for cs.js / (cs101@npm)...

[ 1, 2, 3 ]
[ 3, 2, 1 ]
[ 1, 2, 3 ]
Singly linked list test passed.
LinkedList test passed.
Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 39.94ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 18.176ms
  Expected size: 955. Actual size: 955
  SOL first 5: [{"key":12,"value":"number 12"},{"key":16,"value":"number 16"},{"key":21,"value":"number 21"},{"key":59,"value":"number 59"},{"key":42,"value":"number 42"}]
  SOL length: 955

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 3.055ms
  SOL first 5: [{"key":707,"value":"number 707"},{"key":795,"value":"number 795"},{"key":539,"value":"number 539"},{"key":804,"value":"number 804"},{"key":125,"value":"number 125"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 194.531ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 282.099ms
  Expected size: 940. Actual size: 940
  SOL first 5: [{"thing":{"key":32,"value":"number 32"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":60,"value":"number 60"}},{"thing":{"key":40,"value":"number 40"}},{"thing":{"key":83,"value":"number 83"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 27.636ms
  SOL first 5: [{"thing":{"key":931,"value":"number 931"}},{"thing":{"key":99,"value":"number 99"}},{"thing":{"key":302,"value":"number 302"}},{"thing":{"key":489,"value":"number 489"}},{"thing":{"key":895,"value":"number 895"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 31.471ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 16.951ms
  Expected size: 944. Actual size: 944
  SOL first 5: [{"key":42,"value":"number 42"},{"key":18,"value":"number 18"},{"key":31,"value":"number 31"},{"key":84,"value":"number 84"},{"key":77,"value":"number 77"}]
  SOL length: 944

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 1.433ms
  SOL first 5: [{"key":139,"value":"number 139"},{"key":853,"value":"number 853"},{"key":854,"value":"number 854"},{"key":539,"value":"number 539"},{"key":23,"value":"number 23"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 213.872ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 299.855ms
  Expected size: 979. Actual size: 979
  SOL first 5: [{"thing":{"key":20,"value":"number 20"}},{"thing":{"key":43,"value":"number 43"}},{"thing":{"key":17,"value":"number 17"}},{"thing":{"key":71,"value":"number 71"}},{"thing":{"key":10,"value":"number 10"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 24.48ms
  SOL first 5: [{"thing":{"key":445,"value":"number 445"}},{"thing":{"key":480,"value":"number 480"}},{"thing":{"key":43,"value":"number 43"}},{"thing":{"key":800,"value":"number 800"}},{"thing":{"key":987,"value":"number 987"}}]

Scale test heap as tree...
{ size: 1000, heapTop: 999, actual: { min: 0, max: 999 } }
  Heap As Tree 1000 insertions: 43.849ms
Scale test heap as list...
{ size: 1000000, heapTop: 999997, actual: { min: 1, max: 999997 } }
  Heap As List 1000000 insertions: 138.664ms
New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	



Push 2

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 2 	



Push 4

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 1 	node: 2 	



Push 3

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



Push 0

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 4 	


Row: 2
node: 3 	node: 2 	



findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 3 	


Row: 2
node: 1 	node: 2 	



Push 1

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 1 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0


Row: 1
node: 5 	


Row: 2
node: 1 	node: 2 	



findMax
{ max: 5 }



Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
  
  
  Row: 1
node: 5 	
  
  
  Row: 2
node: 3 	node: 4 	
  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
  
  
  Row: 1
node: 9 	
  
  
  Row: 2
node: 8 	node: 7 	
  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.




PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"invert":true}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> 9 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> 123 	node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	node:  -> @Empty 	
  
  	Row: 12
node:  -> 999 	node:  -> @Empty 	
  
  
  
  
  Trie. Size: 1
  
  	Row: 0
  
  	Row: 1
node:  -> @Empty 	
  
  	Row: 2
node:  -> @Empty 	
  
  	Row: 3
node:  -> @Empty 	
  
  	Row: 4
node:  -> @Empty 	
  
  	Row: 5
node:  -> @Empty 	
  
  	Row: 6
node:  -> @Empty 	
  
  	Row: 7
node:  -> @Empty 	
  
  	Row: 8
node:  -> @Empty 	
  
  	Row: 9
node:  -> @Empty 	
  
  	Row: 10
node:  -> @Empty 	
  
  	Row: 11
node:  -> @Empty 	
  
  	Row: 12
node:  -> @Empty 	
  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 29.064ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 27.526ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 43.046ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist index test with deletion. Opts: undefined
Skiplist index test with deletion.: 149.6ms
SkipList index test with deletion passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist index test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 11:  812
Row: 10:  812
Row: 9:  644 812
Row: 8:  271 500 644 769 812
Row: 7:  271 368 445 500 597 633 644 747 769 812
Row: 6:  86 254 271 368 445 500 506 546 576 597 633 644 705 747 769 812 919 920
Row: 5:  19 28 29 45 50 52 56 86 109 194 254 262 271 362 368 381 445 500 506 546 576 597 600 633 644 665 705 747 769 812 864 919 920 982 987
Row: 4:  19 28 29 45 50 52 53 56 58 86 94 109 138 140 194 254 262 270 271 317 320 362 368 381 403 419 432 445 448 500 506 537 546 576 597 600 622 624 633 644 665 686 688 705 722 738 747 764 769 812 827 854 864 883 896 903 919 920 926 975 982 987
Row: 3:  2 8 19 28 29 43 45 50 51 52 53 56 58 86 94 109 122 138 140 157 194 209 217 239 249 254 262 270 271 289 293 308 317 320 362 368 375 381 388 400 403 419 422 432 445 448 463 500 505 506 510 533 537 546 576 597 600 618 622 624 633 634 635 637 644 659 665 686 688 705 706 722 727 730 738 747 756 764 769 796 811 812 827 830 854 864 865 868 878 883 885 896 898 903 913 919 920 926 936 954 975 982 986 987
Row
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 4:  -1
Row: 3:  -1
Row: 2:  -1 1 6
Row: 1:  -1 1 2 4 5 6
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 4:  -1
Row: 3:  -1
Row: 2:  5 -1
Row: 1:  5 4 1 0 -1
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 2:  6 3
Row: 1:  6 4 3
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 39.77ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 15.164ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 28.019ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 16.642ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 46.349ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 14.596ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 323. Actual size: 323

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 319. Actual size: 319

Binary search scale test. 200000. Opts: {"recursive":true}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 180.131ms
  Binary search test passed.
Binary search scale test. 200000. Opts: {}
  Finding 20000 numbers...
  Done.
  Finding 20000 words...
  Done.
  Binary search find phase.: 142.825ms
  Binary search test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {}
  QuickSelect 300 trials.: 3.474ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"recursive":true}
  QuickSelect 300 trials.: 3.838ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom"}
  QuickSelect 300 trials.: 1.692ms
  QuickSelect test passed.
QuickSelect test. List length: 100000. K-th order trials: 300. Opts: {"pivot":"mom","recursive":true}
  QuickSelect 300 trials.: 7.466ms
  QuickSelect test passed.


HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 44.822ms
{ lastVal: 9915 }
  HeapSort test passed.

HeapSort test: {"opts":{"max":true}}. Length: 10000
  HeapSort test: 43.777ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 34.049ms
{ lastVal: 0 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true,"max":true}}. Length: 10000
  HeapSort test: 33.92ms
{ lastVal: 9624 }
  HeapSort test passed.

HeapSort test: {"opts":{}}. Length: 10000
  HeapSort test: 82.17ms
{ lastVal: 9848 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 38.909ms
{ lastVal: 9905 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":false}}. Length: 10000
  HeapSort test: 37.365ms
{ lastVal: 9867 }
  HeapSort test passed.

HeapSort test: {"opts":{"invert":true}}. Length: 10000
  HeapSort test: 35.919ms
{ lastVal: 0 }
  HeapSort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 12.77ms
{ lastVal: 2417 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{}}. Length: 2500
  Insertion Sort test: 10.12ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 13.776ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"invert":true}}. Length: 2500
  Insertion Sort test: 4.356ms
{ lastVal: 0 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nosplice":true}}. Length: 2500
  Insertion Sort test: 31.769ms
{ lastVal: 2403 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":false}}. Length: 2500
  Insertion Sort test: 3.862ms
{ lastVal: 2414 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":true}}. Length: 2500
  Insertion Sort test: 94.844ms
{ lastVal: 2457 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"inplace":false,"nobs":true}}. Length: 2500
  Insertion Sort test: 98.057ms
{ lastVal: 2434 }
  Insertion Sort test passed.

Insertion Sort test: {"opts":{"nobs":false,"nosplice":true}}. Length: 2500
  Insertion Sort test: 6.97ms
{ lastVal: 2466 }
  Insertion Sort test passed.


MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 14.613ms
{ lastVal: 9961 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 14.92ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 10000
  MergeSort test: 18.637ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 10000
  MergeSort test: 7.026ms
{ lastVal: 0 }
  MergeSort test passed.


QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 21.386ms
{ lastVal: 9902 }
  QuickSort test passed.

QuickSort test: {"opts":{"iterative":true}}. Length: 10000
  QuickSort test: 12.799ms
{ lastVal: 9901 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 21.792ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 10.839ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 7.223ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{"pivot":"mom"}}. Length: 10000
  QuickSort test: 5.735ms
{ lastVal: 9929 }
  QuickSort test passed.

Selection Sort test: {"opts":{}}. Length: 2500
  Selection Sort test: 124.31ms
{ lastVal: 2439 }
  Selection Sort test passed.

Selection Sort test: {"opts":{}}. Length: 2500
  Selection Sort test: 87.951ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"invert":true}}. Length: 2500
  Selection Sort test: 114.036ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"invert":true}}. Length: 2500
  Selection Sort test: 88.583ms
{ lastVal: 0 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"inplace":false}}. Length: 2500
  Selection Sort test: 114.596ms
{ lastVal: 2388 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"inplace":false,"nosplice":false}}. Length: 2500
  Selection Sort test: 114.333ms
{ lastVal: 2465 }
  Selection Sort test passed.

Selection Sort test: {"opts":{"nosplice":false}}. Length: 2500
  Selection Sort test: 116.038ms
{ lastVal: 2429 }
  Selection Sort test passed.

Bubble Sort test: {"opts":{}}. Length: 2500
  Bubble Sort test: 3.675ms
{ lastVal: 2423 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{}}. Length: 2500
  Bubble Sort test: 12.456ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"invert":true}}. Length: 2500
  Bubble Sort test: 3.331ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"invert":true}}. Length: 2500
  Bubble Sort test: 4.315ms
{ lastVal: 0 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true}}. Length: 2500
  Bubble Sort test: 11.152ms
{ lastVal: 2402 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true,"nosplice":true}}. Length: 2500
  Bubble Sort test: 24.245ms
{ lastVal: 2469 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"inplace":true,"nobs":true}}. Length: 2500
  Bubble Sort test: 93.345ms
{ lastVal: 2457 }
  Bubble Sort test passed.

Bubble Sort test: {"opts":{"nobs":true}}. Length: 2500
  Bubble Sort test: 130.492ms
{ lastVal: 2375 }
  Bubble Sort test passed.
Tests complete.


