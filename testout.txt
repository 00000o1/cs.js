
Running tests for cs.js / (cs101@npm)...


MergeSort test: {"opts":{}}. Length: 100000
  MergeSort test: 97.32ms
{ lastVal: 99780 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 100000
  MergeSort test: 95.623ms
{ lastVal: 0 }
  MergeSort test passed.

MergeSort test: {"opts":{}}. Length: 100000
  MergeSort test: 90.957ms
{ lastVal: 99328 }
  MergeSort test passed.

MergeSort test: {"opts":{"invert":true}}. Length: 100000
  MergeSort test: 85.588ms
{ lastVal: 0 }
  MergeSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 67.338ms
{ lastVal: 9904 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 59.926ms
{ lastVal: 0 }
  QuickSort test passed.

QuickSort test: {"opts":{}}. Length: 10000
  QuickSort test: 65.013ms
{ lastVal: 9934 }
  QuickSort test passed.

QuickSort test: {"opts":{"invert":true}}. Length: 10000
  QuickSort test: 51.091ms
{ lastVal: 0 }
  QuickSort test passed.
Skiplist iterator test. Opts: undefined
SkipList iterator tests passed.
Skiplist insert test. Opts: undefined
SkipList index test passed.
Skiplist insert test. Opts: undefined
Row: 11:  40
Row: 10:  40
Row: 9:  40 183
Row: 8:  40 102 183
Row: 7:  19 40 102 183 296 517 618 998
Row: 6:  19 40 53 102 148 183 186 296 517 618 645 702 811 845 998
Row: 5:  6 19 40 53 62 102 120 148 183 186 226 227 239 296 321 431 508 517 524 618 641 645 658 702 770 811 845 908 954 998
Row: 4:  6 15 19 29 40 50 53 62 102 120 147 148 176 183 186 222 226 227 239 282 296 319 321 329 344 352 368 386 398 406 417 431 478 508 517 524 535 553 566 568 572 598 618 636 641 645 647 658 696 702 767 770 782 807 811 845 875 908 943 954 976 998
Row: 3:  6 11 15 19 29 40 50 53 62 80 99 102 114 116 119 120 126 139 147 148 154 162 174 176 183 186 194 222 225 226 227 239 265 276 282 293 296 319 321 329 334 344 345 346 352 367 368 372 374 386 395 398 406 407 414 416 417 423 431 472 477 478 483 500 508 517 524 535 553 557 566 568 572 578 581 591 595 598 618 620 625 636 637 641 645 647 658 672 674 685 693 696 702 711 718 733 737 739 746 755 767 770 773 776 780 782 785 807 811 824 837 845 853 859 875 885 894 908 927 943 954 976 983 998
Row: 2:  3 4 6 7 11 14 15 19 25 29 36 40 41 42 50 53 55 56 59 62 73 80 89 92 99 102 104 105 107 114 116 119 120 123 126 129 135 139 147 148 150 154 162 170 174 176 183 186 194 200 201 205 222 225 226 227 236 239 253 255 260 262 264 265 274 276 279 282 283 291 292 293 296 301 312 313 315 317 319 321 329 334 337 338 339 344 345 346 351 352 358 362 367 368 372 374 381 384 386 391 395 398 400 406 407 414 416 417 423 424 425 431 435 440 452 454 459 467 468 472 477 478 483 486 491 494 496 500 508 517 524 528 529 530 533 535 538 553 557 563 566 568 572 577 578 581 591 595 598 602 606 607 612 616 618 620 625 626 630 636 637 641 644 645 646 647 649 653 658 659 663 665 670 672 674 676 679 685 686 692 693 696 700 702 708 711 712 718 725 732 733 737 739 746 755 757 762 767 770 771 773 776 780 782 783 785 786 803 807 811 824 828 831 837 842 845 848 853 859 870 874 875 880 884 885 890 894 908 921 922 926 927 928 937 941 943 954 955 959 976 977 981 983 995 996 997 998
Row
Row
Size: 1000



SkipList Map test passed.
Skiplist insert test. Opts: undefined
Row: 4:  6
Row: 3:  6
Row: 2:  6
Row: 1:  -1 4 5 6
Row: 0:  -1 0 1 2 3 4 5 6
Size: 8




Skiplist insert test. Opts: {"max":true}
Row: 2:  2
Row: 1:  2 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist insert test. Opts: {"max":true,"_breakLinearize":true}
Row: 8:  3
Row: 7:  3
Row: 6:  3
Row: 5:  3
Row: 4:  3
Row: 3:  6 3
Row: 2:  6 3 1
Row: 1:  6 3 1 0
Row: 0:  6 5 4 3 2 1 0 -1
Size: 8




Skiplist has test. Opts: undefined
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"max":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist has test. Opts: {"duplicatesOkay":true}
Test passed. All inserted numbers tested as present in skiplist.

Skiplist scale test. Opts: undefined
  Skiplist scale test. Insert phase: 702.532ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 494.553ms

Skiplist scale test. Opts: {"max":true}
  Skiplist scale test. Insert phase: 660.434ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 451.77ms

Skiplist scale test. Opts: {"p":0.25}
  Skiplist scale test. Insert phase: 696.039ms
  Scale Has Test passed.
  Skiplist scale test. Has phase: 577.625ms

Skiplist delete test. Opts: undefined
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 324. Actual size: 324

Skiplist delete test. Opts: {"max":true}
Test passed. All inserted numbers tested as present, and deleted numbers as absent, in skiplist.
Expected size: 286. Actual size: 286

[ 3, 2, 1 ]
[ 1, 2, 3 ]
[ 3, 2, 1 ]
{
  mainExport: [Object: null prototype] [Module] {
    Heap: [Object: null prototype] [Module] {
      Class: [class Heap],
      create: [Function: create],
      default: [class Heap]
    },
    MergeSort: [Object: null prototype] [Module] {
      default: [Function: MergeSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: MergeSort]
    },
    PQ: [Object: null prototype] [Module] {
      Class: [class PQ],
      create: [Function: create],
      default: [class PQ]
    },
    QuickSort: [Object: null prototype] [Module] {
      default: [Function: QuickSort],
      signedCompare: [Function: signedCompare],
      sort: [Function: QuickSort]
    },
    SOL: [Object: null prototype] [Module] {
      Class: [class SOL],
      create: [Function: create],
      default: [class SOL]
    },
    SkipList: [Object: null prototype] [Module] {
      Class: [class SkipList],
      create: [Function: create],
      default: [class SkipList]
    },
    Trie: [Object: null prototype] [Module] {
      Class: [class Trie],
      Start: Symbol(@Start),
      TrieNode: [class TrieNode],
      create: [Function: create],
      default: [class Trie]
    }
  }
}
New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }

New heap

Heap (as list)
#store: Array

Row: 0
node: @Empty 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: @Empty 	


Push 2

Heap (as list)
#store: Array

Row: 0
node: 2 	

Row: 1
node: 1 	node: @Empty 	


Push 4

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	


Push 3

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: @Empty 	


Push 0

Heap (as list)
#store: Array

Row: 0
node: 4 	

Row: 1
node: 3 	node: 2 	

Row: 2
node: 1 	node: 0 	node: @Empty 	


findMax
{ max: 4 }

Pop

Heap (as list)
#store: Array

Row: 0
node: 3 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	


Push 1

Heap (as list)
#store: Array

Row: 0
node: 1 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 1 }

Replace max with 5

Heap (as list)
#store: Array

Row: 0
node: 5 	

Row: 1
node: 1 	node: 2 	

Row: 2
node: @Empty 	node: 0 	node: @Empty 	


findMax
{ max: 5 }

Scale test heap as tree...
{ size: 10000, heapTop: 9999, actual: { min: 1, max: 9999 } }
  Heap As Tree 10000 insertions: 3.034s
Scale test heap as list...
{ size: 10000000, heapTop: 9999998, actual: { min: 1, max: 9999998 } }
  Heap As List 10000000 insertions: 1.462s


Order test testing opts: {"max":true,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":true,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":2}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":4}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":8}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"max":false,"arity":5}
  Run: 1
  Post push size: 10000
  End Run: 1
  Run: 2
  Post push size: 10000
  End Run: 2
  Run: 3
  Post push size: 10000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":true,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":2}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":4}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":8}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Order test testing opts: {"asTree":true,"max":false,"arity":5}
  Run: 1
  Post push size: 1000
  End Run: 1
  Run: 2
  Post push size: 1000
  End Run: 2
  Run: 3
  Post push size: 1000
  End Run: 3
  Total 0 heap property violations across 3 runs.
  Test passed.
  
  


Heapify test testing opts: {"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":true}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"max":false}
  Post heapify size: 10000
  Size valid? true. Expected 10000 was 10000
  Total 0 heap property violations.
  Total pops: 10000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":true}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  


Heapify test testing opts: {"arity":4,"asTree":true,"max":false}
  Post heapify size: 1000
  Size valid? true. Expected 1000 was 1000
  Total 0 heap property violations.
  Total pops: 1000
  Test passed.
  
  
Heap merge test
  
  Heap (as tree)
  #store: Tree
  
  Row: 0
node: 5 	  
  
  Row: 1
node: 3 	node: 4 	  
  
  Row: 2
node: 2 	node: 1 	  
  
  
  
  Heap (as list)
  #store: Array
  
  Row: 0
node: 9 	  
  
  Row: 1
node: 8 	node: 7 	  
  
  Row: 2
node: 5 	node: 6 	  
  
  
  Test passed.


Heap huge merge test
  Size test: true
  Test passed.


Self-organizing list scale test. Opts: undefined
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 35.944ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 14.362ms
  Expected size: 916. Actual size: 916
  SOL first 5: [{"key":33,"value":"number 33"},{"key":65,"value":"number 65"},{"key":11,"value":"number 11"},{"key":32,"value":"number 32"},{"key":54,"value":"number 54"}]
  SOL length: 916

Self-organizing list iterator test. Opts: {}
  Iterator Test passed.
  Self-organizing list iterator test.: 2.132ms
  SOL first 5: [{"key":698,"value":"number 698"},{"key":341,"value":"number 341"},{"key":512,"value":"number 512"},{"key":838,"value":"number 838"},{"key":533,"value":"number 533"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 207.542ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 286.277ms
  Expected size: 959. Actual size: 959
  SOL first 5: [{"thing":{"key":37,"value":"number 37"}},{"thing":{"key":34,"value":"number 34"}},{"thing":{"key":46,"value":"number 46"}},{"thing":{"key":107,"value":"number 107"}},{"thing":{"key":105,"value":"number 105"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 28.053ms
  SOL first 5: [{"thing":{"key":256,"value":"number 256"}},{"thing":{"key":646,"value":"number 646"}},{"thing":{"key":465,"value":"number 465"}},{"thing":{"key":226,"value":"number 226"}},{"thing":{"key":325,"value":"number 325"}}]

Self-organizing list scale test. Opts: {"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 31.504ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 18.507ms
  Expected size: 929. Actual size: 929
  SOL first 5: [{"key":10,"value":"number 10"},{"key":16,"value":"number 16"},{"key":22,"value":"number 22"},{"key":25,"value":"number 25"},{"key":55,"value":"number 55"}]
  SOL length: 929

Self-organizing list iterator test. Opts: {"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 1.766ms
  SOL first 5: [{"key":198,"value":"number 198"},{"key":270,"value":"number 270"},{"key":389,"value":"number 389"},{"key":523,"value":"number 523"},{"key":174,"value":"number 174"}]
  SOL length: 1000

Self-organizing list scale test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Scale Has Test passed.
  Self-organizing list scale test. Insert phase: 185.529ms
  Scale Delete Test passed.
  Self-organizing list scale test. Delete phase: 341.601ms
  Expected size: 981. Actual size: 981
  SOL first 5: [{"thing":{"key":10,"value":"number 10"}},{"thing":{"key":20,"value":"number 20"}},{"thing":{"key":38,"value":"number 38"}},{"thing":{"key":67,"value":"number 67"}},{"thing":{"key":14,"value":"number 14"}}]

Self-organizing list iterator test. Opts: {"asLinkedList":true,"_breakNoReorganize":true}
  Iterator Test passed.
  Self-organizing list iterator test.: 45.557ms
  SOL first 5: [{"thing":{"key":786,"value":"number 786"}},{"thing":{"key":208,"value":"number 208"}},{"thing":{"key":888,"value":"number 888"}},{"thing":{"key":121,"value":"number 121"}},{"thing":{"key":191,"value":"number 191"}}]



PQ order test testing opts: ""
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  


PQ order test testing opts: {"max":false}
  Run: 1
  End Run: 1
  Run: 2
  End Run: 2
  Run: 3
  End Run: 3
  Total 0 pq property violations across 3 runs.
  Test passed.
  
  

Basic trie test.
  Empty trie:
  
  size: 0
  
  Trie. Size: 0
  
  	Row: 0
node:  -> @Empty 	  
  
  
  Trie after 3 insertions:
  
  size: 3
  
  Trie. Size: 3
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> 9 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie after 1 deletion:
  
  size: 2
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> 123 	node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> 12 	  
  
  
  Trie basic test passed.

Subtrie deletion test.
  
  Trie. Size: 2
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	node:  -> @Empty 	  
  	Row: 11
node:  -> 999 	node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  
  Trie. Size: 1
  
  	Row: 0
node:  -> @Empty 	  
  	Row: 1
node:  -> @Empty 	  
  	Row: 2
node:  -> @Empty 	  
  	Row: 3
node:  -> @Empty 	  
  	Row: 4
node:  -> @Empty 	  
  	Row: 5
node:  -> @Empty 	  
  	Row: 6
node:  -> @Empty 	  
  	Row: 7
node:  -> @Empty 	  
  	Row: 8
node:  -> @Empty 	  
  	Row: 9
node:  -> @Empty 	  
  	Row: 10
node:  -> @Empty 	  
  	Row: 11
node:  -> @Empty 	  
  	Row: 12
node:  -> 888 	  
  
  
  Subtrie deletion test passed.

Trie scale test.
  Trie scale test.: 234.338ms
  Trie scale test passed.

Trie scale delete and has test.
  Trie scale test.: 258.661ms
  Trie scale test passed.

Trie key iterator test.
  Trie key iterator short test passed.
  Trie key iterator long test passed.

Trie repeated idempotent test.
  Trie repeated idempotent test.: 605.94ms
  Trie repeated idempotent test passed.

Trie iterator edgecase test.
  Trie iterator edgecase test passed.
Tests complete.


